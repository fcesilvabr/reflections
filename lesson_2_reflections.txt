What happens when you initialize a repository? Why do you need to do it?
	When we initialize a repository it creates a directory (.git) with a structure ready to follow 
		with the commits and operations on the files we may want do work on (by work on I mean, control versions).

How is the staging area different from the working directory and the repository? What value do you think it offers?
	The repository is a kind of full structure for you to work (i.e. you may not want to commit all
		the files in a working directory by moving the ones you wnat to the staging area and them to the repository
		through a commit and they will be kept in the working directory).
	The working directory is the 'regular' directory you have access through your 'file explorer' tools.
	The value of the staging area is related to provide information about what is going on during
		the commit processes, i.e. which files aren´t commited yet, which files aren´t been managed yet, etc.
		
How can you use the staging area to make sure you have one commit per logical change?
	By using git diff with the right parameters it´s possible to know what files and changes were made in each file and
	and so we can go back and forth to commit in the 'best practice' way (one commit per logical change).
	
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Some examples of using branches are for instance tests with features you´re not certain about yet and
	any other situation you may think it´s interesting to work with different courses of action.
	
How do the diagrams help you visualize the branch structure?
	Diagrams help to visualize the history of the branchs and also the 'reachability' of the commits for a project.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	Merging two branches together causes the tip of the branch to be the last one making possible to work in collaboration with others or
	even alone with a better control for fixes and new features during the development.
	We use to represent the commits in a diagram using arrows in order to make it easy to identify the parents for the commits and avoid to lose 
	commits during the merge commands.
	
What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
	Both have their use and provide information for the developer to decide when using one or another.